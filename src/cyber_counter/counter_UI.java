/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cyber_counter;


import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author sd-hck
 */
public class counter_UI extends javax.swing.JDialog{

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form ConfirmDialog
     */
    public counter_UI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        choronoPnl.setVisible(false);
        
    
        
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
        this.setLocationRelativeTo(null);
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        coutTf = new javax.swing.JTextField();
        demarBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        hTf = new javax.swing.JTextField();
        mTf = new javax.swing.JTextField();
        somTmpLb = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        choronoPnl = new javax.swing.JPanel();
        timerPnl = new javax.swing.JPanel();
        heurLb = new javax.swing.JLabel();
        minLb = new javax.swing.JLabel();
        secondLb = new javax.swing.JLabel();
        totalLb = new javax.swing.JLabel();
        pausePlayBtn = new javax.swing.JButton();
        configBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        configPanel.setBackground(new java.awt.Color(255, 255, 255));
        configPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cyber chrono config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Zekton Rg", 3, 14), new java.awt.Color(0, 153, 153))); // NOI18N
        configPanel.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Zekton Rg", 1, 12)); // NOI18N
        jLabel2.setText("Coût en Ar/s");
        configPanel.add(jLabel2);
        jLabel2.setBounds(10, 30, 100, 30);

        coutTf.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        coutTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        coutTf.setText("20");
        coutTf.setBorder(null);
        configPanel.add(coutTf);
        coutTf.setBounds(100, 30, 60, 30);

        demarBtn.setText("Démarer");
        demarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demarBtnActionPerformed(evt);
            }
        });
        configPanel.add(demarBtn);
        demarBtn.setBounds(160, 130, 95, 25);

        jButton2.setText("QUITER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        configPanel.add(jButton2);
        jButton2.setBounds(270, 130, 83, 25);

        jLabel4.setFont(new java.awt.Font("Zekton Rg", 1, 12)); // NOI18N
        jLabel4.setText("Maximal :");
        configPanel.add(jLabel4);
        jLabel4.setBounds(10, 80, 100, 14);
        configPanel.add(jSeparator1);
        jSeparator1.setBounds(30, 120, 340, 20);

        hTf.setFont(new java.awt.Font("Lucida Sans", 0, 15)); // NOI18N
        hTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        hTf.setText("00");
        hTf.setBorder(null);
        hTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hTfActionPerformed(evt);
            }
        });
        hTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hTfKeyReleased(evt);
            }
        });
        configPanel.add(hTf);
        hTf.setBounds(80, 70, 60, 30);

        mTf.setFont(new java.awt.Font("Lucida Sans", 0, 15)); // NOI18N
        mTf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mTf.setText("15");
        mTf.setBorder(null);
        mTf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mTfMouseReleased(evt);
            }
        });
        mTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTfActionPerformed(evt);
            }
        });
        mTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mTfKeyReleased(evt);
            }
        });
        configPanel.add(mTf);
        mTf.setBounds(160, 70, 50, 30);

        somTmpLb.setText("00.00 Ar");
        configPanel.add(somTmpLb);
        somTmpLb.setBounds(240, 70, 130, 30);
        configPanel.add(jSeparator2);
        jSeparator2.setBounds(110, 100, 110, 10);

        jLabel3.setFont(new java.awt.Font("Liberation Serif", 0, 10)); // NOI18N
        jLabel3.setText("mada.soft.innovation");
        configPanel.add(jLabel3);
        jLabel3.setBounds(10, 130, 140, 30);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/cadre.png"))); // NOI18N
        jLabel6.setText("jLabel6");
        configPanel.add(jLabel6);
        jLabel6.setBounds(60, 40, 170, 40);

        choronoPnl.setBackground(new java.awt.Color(255, 255, 255));
        choronoPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cyber chrono", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Zekton Rg", 3, 18), new java.awt.Color(0, 153, 153))); // NOI18N

        timerPnl.setBackground(new java.awt.Color(255, 255, 255));
        timerPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        timerPnl.setLayout(new java.awt.GridLayout(1, 0));

        heurLb.setFont(new java.awt.Font("Zekton Rg", 1, 58)); // NOI18N
        heurLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heurLb.setText("00:");
        timerPnl.add(heurLb);

        minLb.setFont(new java.awt.Font("Zekton Rg", 1, 58)); // NOI18N
        minLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minLb.setText("00:");
        timerPnl.add(minLb);

        secondLb.setFont(new java.awt.Font("Zekton Rg", 1, 58)); // NOI18N
        secondLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondLb.setText("00");
        timerPnl.add(secondLb);

        totalLb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLb.setText("Somme : 00.00");

        pausePlayBtn.setText("Pause");
        pausePlayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausePlayBtnActionPerformed(evt);
            }
        });

        configBtn.setText("Config");
        configBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Quitter");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Serif", 0, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("mada.soft.innovation");

        javax.swing.GroupLayout choronoPnlLayout = new javax.swing.GroupLayout(choronoPnl);
        choronoPnl.setLayout(choronoPnlLayout);
        choronoPnlLayout.setHorizontalGroup(
            choronoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choronoPnlLayout.createSequentialGroup()
                .addGap(110, 322, Short.MAX_VALUE)
                .addGroup(choronoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pausePlayBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(configBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, choronoPnlLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(totalLb, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103))
            .addGroup(choronoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(choronoPnlLayout.createSequentialGroup()
                    .addComponent(timerPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 99, Short.MAX_VALUE)))
        );
        choronoPnlLayout.setVerticalGroup(
            choronoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, choronoPnlLayout.createSequentialGroup()
                .addGroup(choronoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(choronoPnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(choronoPnlLayout.createSequentialGroup()
                        .addComponent(pausePlayBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(configBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalLb, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(choronoPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(choronoPnlLayout.createSequentialGroup()
                    .addComponent(timerPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 39, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(choronoPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choronoPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 149, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void demarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demarBtnActionPerformed
        // TODO add your handling code here:
        cout=Integer.parseInt(coutTf.getText());
        lancerCounter();
    }//GEN-LAST:event_demarBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void pausePlayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausePlayBtnActionPerformed
        // TODO add your handling code here:
        if(pausePlayBtn.getText()=="Pause"){
        chronoTheard.suspend();
        pausePlayBtn.setText("Resume");
        configBtn.setEnabled(true);
        exitBtn.setEnabled(true);
        }
        else{
        chronoTheard.resume();
        pausePlayBtn.setText("Pause");
        configBtn.setEnabled(false);
        exitBtn.setEnabled(false);
            
        }
        
        
        
        
        
    }//GEN-LAST:event_pausePlayBtnActionPerformed

    private void configBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configBtnActionPerformed
        // TODO add your handling code here:
        configPanel.setVisible(true);
        choronoPnl.setVisible(false);
    }//GEN-LAST:event_configBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void mTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mTfActionPerformed

    private void hTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hTfActionPerformed

    private void hTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hTfKeyReleased
        // TODO add your handling code here:
        updateSomTmp();
        
    }//GEN-LAST:event_hTfKeyReleased

    private void mTfMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mTfMouseReleased
        // TODO add your handling code here:
      
    }//GEN-LAST:event_mTfMouseReleased

    private void mTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mTfKeyReleased
        // TODO add your handling code here:
          updateSomTmp();
    }//GEN-LAST:event_mTfKeyReleased
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(counter_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(counter_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(counter_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(counter_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                counter_UI dialog = new counter_UI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel choronoPnl;
    private javax.swing.JButton configBtn;
    private javax.swing.JPanel configPanel;
    private javax.swing.JTextField coutTf;
    private javax.swing.JButton demarBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JTextField hTf;
    private javax.swing.JLabel heurLb;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField mTf;
    private javax.swing.JLabel minLb;
    private javax.swing.JButton pausePlayBtn;
    private javax.swing.JLabel secondLb;
    private javax.swing.JLabel somTmpLb;
    private javax.swing.JPanel timerPnl;
    private javax.swing.JLabel totalLb;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
    int s=0;
    int m=0;
    int h=0;
    
    int cout=20;
    int total=0;
    
    Thread chronoTheard;
    boolean start=true;
    
    private void lancerCounter() {
        configPanel.setVisible(false);
        configBtn.setEnabled(false);
        exitBtn.setEnabled(false);
        choronoPnl.setVisible(true);
        chronoTheard = new Thread (
        new Runnable(){
            @Override
            public void run() {
                try {
                   while(start){
                        Thread.sleep (1000); // le thread main s’endort pendant 5 secondes
                        s++;
                        showTime();
                    }
                } catch (Exception e) {};
            }
        }); 
        chronoTheard.start(); // t2 est démarré
        
    }
    public void showTime(){
        if(s<60){
            if((""+s).length()==1)
            secondLb.setText("0"+s);
            else
            secondLb.setText(""+s);    
        }else{
            m++;
            s=0;
            if(m<60){
                if((""+m).length()==1)
                    minLb.setText("0"+m+":");
                else
                    minLb.setText(""+m+":");
                
            }else{
                h++;
                m=0;
                if((""+h).length()==1)
                heurLb.setText("0"+h+":");
                else
                heurLb.setText("0"+h+":");    
            }
        }
        int total=(m+60*h)*cout;
        totalLb.setText("Somme : "+total+".00 Ar");
    }

    private void updateSomTmp() {
        int cout=Integer.parseInt(coutTf.getText());
        int h=Integer.parseInt(hTf.getText());
        int m=Integer.parseInt(mTf.getText());
        int total=(((m+60*h))*cout);
        somTmpLb.setText("somme: "+total+".00 Ar");
        
    }

    
}
